---
- hosts: localhost
  connection: local
  
  vars:
    app_name: app1
  
  vars_files:
    - "/home/avi/ansible/avi/vars/creds.yml"

  roles:
    - role: "avinetworks.avisdk"
  
  tasks:
    - name: Setting up Application
      debug: msg="{{ app_name }}"
        
    - name: Create health monitor
      avi_healthmonitor:
        controller: "{{avi_credentials.controller}}"
        username: "{{avi_credentials.username}}"
        password: "{{avi_credentials.password}}"
        api_version: "{{avi_credentials.api_version}}"
        name: app1-hm
        http_monitor:
          http_request: "HEAD / HTTP/1.0"
          http_response_code:
            - HTTP_2XX
            - HTTP_3XX
        receive_timeout: 4
        failed_checks: 3
        send_interval: 10
        successful_checks: 3
        type: HEALTH_MONITOR_HTTP

    - name: Create pool1
      avi_pool:
        controller: "{{avi_credentials.controller}}"
        username: "{{avi_credentials.username}}"
        password: "{{avi_credentials.password}}"
        api_version: "{{avi_credentials.api_version}}"
        name: app1-pool
        lb_algorithm: LB_ALGORITHM_ROUND_ROBIN
        health_monitor_refs:
          - "/api/healthmonitor?name=app1-hm"
        servers:
          - ip:
               addr: "{{ pool_server1 }}"
               type: 'V4'
          - ip:
               addr: "{{ pool_server2 }}"
               type: 'V4'


    - name: Create pool2
      avi_pool:
        controller: "{{avi_credentials.controller}}"
        username: "{{avi_credentials.username}}"
        password: "{{avi_credentials.password}}"
        api_version: "{{avi_credentials.api_version}}"
        name: app1-pool-custom
        lb_algorithm: LB_ALGORITHM_ROUND_ROBIN
        health_monitor_refs:
          - "/api/healthmonitor?name=app1-hm"
        servers:
          - ip:
               addr: "{{ pool_server3 }}"
               type: 'V4'
          - ip:
               addr: "{{ pool_server4 }}"
               type: 'V4'
                                       
    - name: Create a HTTP Policy set 
      avi_httppolicyset:
        controller: "{{avi_credentials.controller}}"
        username: "{{avi_credentials.username}}"
        password: "{{avi_credentials.password}}"
        api_version: "{{avi_credentials.api_version}}"
        name: policy-vs-app1-custom
        http_request_policy:
         rules:
         - index: 1
           enable: true
           name: Rule 1
           match:
             path:
               match_case: INSENSITIVE
               match_str:
               - custom
               match_criteria: CONTAINS
           switching_action:
             action: HTTP_SWITCHING_SELECT_POOL
             status_code: HTTP_LOCAL_RESPONSE_STATUS_CODE_200
             pool_ref: "/api/pool/?name=app1-pool-custom"
        is_internal_policy: false

    
    - name: Create Virtualservice
      avi_virtualservice:
        controller: "{{avi_credentials.controller}}"
        username: "{{avi_credentials.username}}"
        password: "{{avi_credentials.password}}"
        api_version: "{{avi_credentials.api_version}}"
        name: "{{ app_name }}"
        services:
          - port: 80
        pool_ref: '/api/pool?name=app1-pool'
        vip:
          - ip_address:
              addr: "{{ app1_vip }}"
              type: 'V4'
            vip_id: '1'
        http_policies:
        - index: 11
          http_policy_set_ref: "/api/httppolicyset/?name=policy-vs-app1-custom"
        analytics_policy:
          udf_log_throttle: 10
          enabled: true
          full_client_logs:
            duration: 0
            all_headers: true
            throttle: 10
            enabled: true
          metrics_realtime_update:
            duration: 0
            enabled: true
          significant_log_throttle: 10
          client_insights: PASSIVE
